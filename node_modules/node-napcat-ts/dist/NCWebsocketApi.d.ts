import type { WSSendParam } from './Interfaces.js';
import { NCWebsocketBase } from './NCWebsocketBase.js';
export declare class NCWebsocketApi extends NCWebsocketBase {
    /**
     * @ontbot11
     * 发送私聊信息
     */
    send_private_msg(params: WSSendParam['send_private_msg']): Promise<{
        message_id: number;
    }>;
    /**
     * @onebot11
     * 发送群聊信息
     */
    send_group_msg(params: WSSendParam['send_group_msg']): Promise<{
        message_id: number;
    }>;
    /**
     * @onebot11
     * 发送信息
     */
    send_msg(params: WSSendParam['send_msg']): Promise<{
        message_id: number;
    }>;
    /**
     * @onebot11
     * 撤回消息
     */
    delete_msg(params: WSSendParam['delete_msg']): Promise<{}>;
    /**
     * @onebot11
     * 获取信息
     */
    get_msg(params: WSSendParam['get_msg']): Promise<({
        message_type: "private";
        sender: {
            user_id: number;
            nickname: string;
            card: string;
        };
        sub_type: "friend";
    } | {
        message_type: "group";
        group_id: number;
        sender: {
            user_id: number;
            nickname: string;
            card: string;
            role: "owner" | "admin" | "member";
        };
        sub_type: "normal";
    }) & {
        self_id: number;
        user_id: number;
        time: number;
        message_id: number;
        message_seq: number;
        real_id: number;
        raw_message: string;
        font: number;
        post_type: "message" | "message_sent";
    } & import("./Interfaces.js").MessageType>;
    /**
     * @onebot11
     * 获取合并信息
     */
    get_forward_msg(params: WSSendParam['get_forward_msg']): Promise<{
        messages: (({
            message_type: "private";
            sender: {
                user_id: number;
                nickname: string;
                card: string;
            };
            sub_type: "friend";
        } | {
            message_type: "group";
            group_id: number;
            sender: {
                user_id: number;
                nickname: string;
                card: string;
                role: "owner" | "admin" | "member";
            };
            sub_type: "normal";
        }) & {
            self_id: number;
            user_id: number;
            time: number;
            message_id: number;
            message_seq: number;
            real_id: number;
            raw_message: string;
            font: number;
            post_type: "message" | "message_sent";
        } & import("./Interfaces.js").MessageType)[];
    }>;
    /**
     * @onebot11
     * 点赞
     */
    send_like(params: WSSendParam['send_like']): Promise<{}>;
    /**
     * @onebot11
     * 踢出群聊
     */
    set_group_kick(params: WSSendParam['set_group_kick']): Promise<{}>;
    /**
     * @onebot11
     * 群聊禁言
     */
    set_group_ban(params: WSSendParam['set_group_ban']): Promise<{}>;
    /**
     * @onebot11
     * 群聊匿名禁言
     */
    /**
     * @onebot11
     * 群聊全员禁言
     */
    set_group_whole_ban(params: WSSendParam['set_group_whole_ban']): Promise<{}>;
    /**
     * @onebot11
     * 设置群管理员
     */
    set_group_admin(params: WSSendParam['set_group_admin']): Promise<{}>;
    /**
     * @onebot11
     * 设置群匿名
     */
    /**
     * @onebot11
     * 设置群名片
     */
    set_group_card(params: WSSendParam['set_group_card']): Promise<{}>;
    /**
     * @onebot11
     * 设置群名
     */
    set_group_name(params: WSSendParam['set_group_name']): Promise<{}>;
    /**
     * @onebot11
     * 退出群聊
     */
    set_group_leave(params: WSSendParam['set_group_leave']): Promise<{}>;
    /**
     * @onebot11
     * 设置群聊专属头衔
     */
    set_group_special_title(params: WSSendParam['set_group_special_title']): Promise<{}>;
    /**
     * @onebot11
     * 处理好友添加请求
     */
    set_friend_add_request(params: WSSendParam['set_friend_add_request']): Promise<{}>;
    /**
     * @onebot11
     * 处理群聊添加请求
     */
    set_group_add_request(params: WSSendParam['set_group_add_request']): Promise<{}>;
    /**
     * @onebot11
     * 获取登录号信息
     */
    get_login_info(): Promise<{
        user_id: number;
        nickname: string;
    }>;
    /**
     * @onebot11
     * 获取陌生人的信息
     */
    get_stranger_info(params: WSSendParam['get_stranger_info']): Promise<{
        user_id: number;
        uid: string;
        nickname: string;
        age: number;
        qid: string;
        qqLevel: number;
        sex: "female" | "male" | "unknown";
        long_nick: string;
        reg_time: number;
        is_vip: boolean;
        is_years_vip: boolean;
        vip_level: number;
        remark: string;
        status: number;
        login_days: number;
    }>;
    /**
     * @onebot11
     * 获取好友列表
     */
    get_friend_list(params?: WSSendParam['get_friend_list']): Promise<{
        qid: string;
        longNick: string;
        birthday_year: number;
        birthday_month: number;
        birthday_day: number;
        age: number;
        sex: string;
        eMail: string;
        phoneNum: string;
        categoryId: number;
        richTime: number;
        richBuffer: {
            [key: string]: number;
        };
        uid: string;
        uin: string;
        nick: string;
        remark: string;
        user_id: number;
        nickname: string;
        level: number;
    }[]>;
    /**
     * @onebot11
     * 获取群信息
     */
    get_group_info(params: WSSendParam['get_group_info']): Promise<{
        group_id: number;
        group_name: string;
        member_count: number;
        max_member_count: number;
    }>;
    /**
     * @onebot11
     * 获取群列表
     */
    get_group_list(params?: WSSendParam['get_group_list']): Promise<{
        group_id: number;
        group_name: string;
        member_count: number;
        max_member_count: number;
    }[]>;
    /**
     * @onebot11
     * 获取群成员信息
     */
    get_group_member_info(params: WSSendParam['get_group_member_info']): Promise<{
        group_id: number;
        user_id: number;
        nickname: string;
        card: string;
        sex: "unknown" | "male" | "female";
        age: number;
        area: string;
        level: number;
        qq_level: number;
        join_time: number;
        last_sent_time: number;
        title_expire_time: number;
        unfriendly: boolean;
        card_changeable: boolean;
        is_robot: boolean;
        shut_up_timestamp: number;
        role: "owner" | "admin" | "member";
        title: string;
    }>;
    /**
     * @onebot11
     * 获取群成员列表
     */
    get_group_member_list(params: WSSendParam['get_group_member_list']): Promise<{
        group_id: number;
        group_name: string;
        member_count: number;
        max_member_count: number;
    }[]>;
    /**
     * @onebot11
     * 获取群荣誉
     */
    get_group_honor_info(params: WSSendParam['get_group_honor_info']): Promise<{
        group_id: string;
        current_talkative: {
            user_id: number;
            avatar: string;
            nickname: string;
            day_count: number;
            description: string;
        };
        talkative_list: {
            user_id: number;
            avatar: string;
            description: string;
            day_count: number;
            nickname: string;
        }[];
        performer_list: {
            user_id: number;
            avatar: string;
            description: string;
            day_count: number;
            nickname: string;
        }[];
        legend_list: {
            user_id: number;
            avatar: string;
            description: string;
            day_count: number;
            nickname: string;
        }[];
        emotion_list: {
            user_id: number;
            avatar: string;
            description: string;
            day_count: number;
            nickname: string;
        }[];
        strong_newbie_list: {
            user_id: number;
            avatar: string;
            description: string;
            day_count: number;
            nickname: string;
        }[];
    }>;
    /**
     * @onebot11
     * 获取Cookies
     */
    get_cookies(params: WSSendParam['get_cookies']): Promise<{
        cookies: string;
        bkn: string;
    }>;
    /**
     * @onebot11
     * 获取CsrfToken
     */
    get_csrf_token(): Promise<{
        token: string;
    }>;
    /**
     * @onebot11
     * 获取Credentials
     */
    get_credentials(): Promise<{
        cookies: string;
        token: string;
    }>;
    /**
     * @onebot11
     * 获取语音
     */
    get_record(params: WSSendParam['get_record']): Promise<{
        file: string;
        url: string;
        file_size: string;
        file_name: string;
        base64: string;
    }>;
    /**
     * @onebot11
     * 获取图片
     */
    get_image(params: WSSendParam['get_image']): Promise<{
        file: string;
        url: string;
        file_size: string;
        file_name: string;
        base64: string;
    }>;
    /**
     * @onebot11
     * 能否发图片
     */
    can_send_image(): Promise<{
        yes: true;
    }>;
    /**
     * @onebot11
     * 能否发语音
     */
    can_send_record(): Promise<{
        yes: true;
    }>;
    /**
     * @onebot11
     * 获取状态
     */
    get_status(): Promise<{
        online: boolean;
        good: true;
        stat: {};
    }>;
    /**
     * @onebot11
     * 获取版本信息
     */
    get_version_info(): Promise<{
        app_name: "NapCat.Onebot";
        protocol_version: "v11";
        app_version: string;
    }>;
    /**
     * @onebot11
     * 重启OneBot实现
     */
    /**
     * @onebot11
     * 重启OneBot缓存
     */
    /**
     * @gocqhttp
     * 设置qq名片
     */
    set_qq_profile(params: WSSendParam['set_qq_profile']): Promise<{
        result: 0;
        errMsg: "";
    }>;
    /**
     * @gocqhttp
     * 企点获取qq信息
     */
    /**
     * @gocqhttp
     * 获取型号设置
     */
    _get_model_show(params: WSSendParam['_get_model_show']): Promise<{
        variants: {
            model_show: string;
            need_pay: boolean;
        };
    }[]>;
    /**
     * @gocqhttp
     * 设置型号设置
     */
    _set_model_show(params: WSSendParam['_set_model_show']): Promise<{}>;
    /**
     * @gocqhttp
     * 获取在线客户端
     */
    get_online_clients(params?: WSSendParam['get_online_clients']): Promise<[]>;
    /**
     * @gocqhttp
     * 获取单向好友列表
     */
    /**
     * @gocqhttp
     * 删除好友
     */
    delete_friend(params: WSSendParam['delete_friend']): Promise<{
        result: 0;
        errMsg: "success";
    }>;
    /**
     * @gocqhttp
     * 删除单向好友
     */
    /**
     * @gocqhttp
     * 标记消息已读
     */
    mark_msg_as_read(params: WSSendParam['mark_msg_as_read']): Promise<{}>;
    /**
     * @gocqhttp
     * 发送群合并信息
     */
    send_group_forward_msg(params: WSSendParam['send_group_forward_msg']): Promise<{
        message_id: number;
    }>;
    /**
     * @gocqhttp
     * 发送私聊合并信息
     */
    send_private_forward_msg(params: WSSendParam['send_private_forward_msg']): Promise<{
        message_id: number;
    }>;
    /**
     * @gocqhttp
     * 获取群聊历史记录
     */
    get_group_msg_history(params: WSSendParam['get_group_msg_history']): Promise<{
        messages: (({
            message_type: "private";
            sender: {
                user_id: number;
                nickname: string;
                card: string;
            };
            sub_type: "friend";
        } | {
            message_type: "group";
            group_id: number;
            sender: {
                user_id: number;
                nickname: string;
                card: string;
                role: "owner" | "admin" | "member";
            };
            sub_type: "normal";
        }) & {
            self_id: number;
            user_id: number;
            time: number;
            message_id: number;
            message_seq: number;
            real_id: number;
            raw_message: string;
            font: number;
            post_type: "message" | "message_sent";
        } & import("./Interfaces.js").MessageType)[];
    }>;
    /**
     * @gocqhttp
     * OCR图片
     */
    ocr_image(params: WSSendParam['ocr_image']): Promise<{
        text: string;
        pt1: {
            x: string;
            y: string;
        };
        pt2: {
            x: string;
            y: string;
        };
        pt3: {
            x: string;
            y: string;
        };
        pt4: {
            x: string;
            y: string;
        };
        charBox: {
            charText: string;
            charBox: {
                pt1: {
                    x: string;
                    y: string;
                };
                pt2: {
                    x: string;
                    y: string;
                };
                pt3: {
                    x: string;
                    y: string;
                };
                pt4: {
                    x: string;
                    y: string;
                };
            };
        }[];
        score: string;
    }[]>;
    /**
     * @gocqhttp
     * IOCR图片
     */
    '.ocr_image': (params: WSSendParam[".ocr_image"]) => Promise<{
        text: string;
        pt1: {
            x: string;
            y: string;
        };
        pt2: {
            x: string;
            y: string;
        };
        pt3: {
            x: string;
            y: string;
        };
        pt4: {
            x: string;
            y: string;
        };
        charBox: {
            charText: string;
            charBox: {
                pt1: {
                    x: string;
                    y: string;
                };
                pt2: {
                    x: string;
                    y: string;
                };
                pt3: {
                    x: string;
                    y: string;
                };
                pt4: {
                    x: string;
                    y: string;
                };
            };
        }[];
        score: string;
    }[]>;
    /**
     * @gocqhttp
     * 获取群聊系统信息
     */
    get_group_system_msg(params: WSSendParam['get_group_system_msg']): Promise<{
        InvitedRequest: {
            request_id: number;
            invitor_uin: number;
            invitor_nick: string;
            group_id: number;
            group_name: string;
            checked: boolean;
            actor: number;
        }[];
        join_requests: {
            request_id: number;
            invitor_uin: number;
            invitor_nick: string;
            group_id: number;
            group_name: string;
            checked: boolean;
            actor: number;
        }[];
    }>;
    /**
     * @gocqhttp
     * 获取精华信息列表
     */
    get_essence_msg_list(params: WSSendParam['get_essence_msg_list']): Promise<{
        msg_seq: number;
        msg_random: number;
        sender_id: number;
        sender_nick: string;
        operator_id: number;
        operator_nick: string;
        message_id: number;
        operator_time: number;
        content: import("./Structs.js").Receive[keyof import("./Structs.js").Receive][];
    }[]>;
    /**
     * @gocqhttp
     * 获取群聊@全体成员剩余次数
     */
    get_group_at_all_remain(params: WSSendParam['get_group_at_all_remain']): Promise<{
        can_at_all: boolean;
        remain_at_all_count_for_group: number;
        remain_at_all_count_for_uin: number;
    }>;
    /**
     * @gocqhttp
     * 设置群头像
     */
    set_group_portrait(params: WSSendParam['set_group_portrait']): Promise<{
        result: 0;
        errMsg: "success";
    }>;
    /**
     * @gocqhttp
     * 设置群精华
     */
    set_essence_msg(params: WSSendParam['set_essence_msg']): Promise<{
        errCode: 0;
        errMsg: "success";
    }>;
    /**
     * @gocqhttp
     * 删除精华信息
     */
    delete_essence_msg(params: WSSendParam['delete_essence_msg']): Promise<{
        errCode: 0;
        errMsg: "success";
    }>;
    /**
     * @gocqhttp
     * 设置群公告
     */
    _send_group_notice(params: WSSendParam['_send_group_notice']): Promise<{}>;
    /**
     * @gocqhttp
     * 获取群公告
     */
    _get_group_notice(params: WSSendParam['_get_group_notice']): Promise<{
        notice_id: string;
        sender_id: number;
        publish_time: number;
        message: {
            text: string;
            image: {
                id: string;
                height: string;
                width: string;
            }[];
        };
    }[]>;
    /**
     * @gocqhttp
     * 上传群文件
     */
    upload_group_file(params: WSSendParam['upload_group_file']): Promise<{}>;
    /**
     * @gocqhttp
     * 删除群文件
     */
    delete_group_file(params: WSSendParam['delete_group_file']): Promise<{
        result: 0;
        errMsg: "ok";
        transGroupFileResult: {
            result: {
                retCode: 0;
                retMsg: "ok";
                clientWording: "";
            };
            successFileIdList: string[];
            failFileIdList: string[];
        };
    }>;
    /**
     * @gocqhttp
     * 创建群文件夹
     */
    create_group_file_folder(params: WSSendParam['create_group_file_folder']): Promise<{
        result: {
            retCode: 0;
            retMsg: "ok";
            clientWording: "";
        };
        groupItem: {
            peerId: string;
            type: number;
            folderInfo: {
                folderId: string;
                parentFolderId: string;
                folderName: string;
                createTime: number;
                modifyTime: number;
                createUin: string;
                creatorName: string;
                totalFileCount: number;
                modifyUin: string;
                modifyName: string;
                usedSpace: string;
            };
            fileInfo: null;
        };
    }>;
    /**
     * @gocqhttp
     * 删除群文件夹
     */
    delete_group_folder(params: WSSendParam['delete_group_folder']): Promise<{
        retCode: 0;
        retMsg: "ok";
        clientWording: "";
    }>;
    /**
     * @gocqhttp
     * 获取群文件信息
     */
    get_group_file_system_info(params: WSSendParam['get_group_file_system_info']): Promise<{
        file_count: number;
        limit_count: 10000;
        used_space: 0;
        total_space: 10737418240;
    }>;
    /**
     * @gocqhttp
     * 获取群文件根目录列表
     */
    get_group_root_files(params: WSSendParam['get_group_root_files']): Promise<{
        files: {
            group_id: number;
            file_id: string;
            file_name: string;
            busid: number;
            size: number;
            upload_time: number;
            dead_time: number;
            modify_time: number;
            download_times: number;
            uploader: number;
            uploader_name: string;
        }[];
        folders: {
            group_id: number;
            folder_id: string;
            folder: string;
            folder_name: string;
            create_time: number;
            creator: number;
            creator_name: string;
            total_file_count: number;
        }[];
    }>;
    /**
     * @gocqhttp
     * 获取群文件夹指定文件夹列表
     */
    get_group_files_by_folder(params: WSSendParam['get_group_files_by_folder']): Promise<{
        files: {
            group_id: number;
            file_id: string;
            file_name: string;
            busid: number;
            size: number;
            upload_time: number;
            dead_time: number;
            modify_time: number;
            download_times: number;
            uploader: number;
            uploader_name: string;
        }[];
        folders: {
            group_id: number;
            folder_id: string;
            folder: string;
            folder_name: string;
            create_time: number;
            creator: number;
            creator_name: string;
            total_file_count: number;
        }[];
    }>;
    /**
     * @gocqhttp
     * 获取群文件下载链接
     */
    get_group_file_url(params: WSSendParam['get_group_file_url']): Promise<{
        url: string;
    }>;
    /**
     * @gocqhttp
     * 上传私聊文件
     */
    upload_private_file(params: WSSendParam['upload_private_file']): Promise<{}>;
    /**
     * @gocqhttp
     * 重新加载事件过滤器
     */
    /**
     * @gocqhttp
     * 下载文件
     */
    download_file(params: WSSendParam['download_file']): Promise<{
        file: string;
    }>;
    /**
     * @gocqhttp
     * 检查链接是否安全
     */
    check_url_safely(params: WSSendParam['check_url_safely']): Promise<{
        level: 1;
    }>;
    /**
     * @gocqhttp
     * 获取中文分词
     */
    /**
     * @gocqhttp
     * 快速操作
     */
    '.handle_quick_operation': (params: WSSendParam[".handle_quick_operation"]) => Promise<{}>;
    /**
     * @napcat
     * 获取推荐群聊/用户信息
     */
    ArkSharePeer(params: WSSendParam['ArkSharePeer']): Promise<{
        errCode: 0;
        errMsg: "";
        arkJson: string;
    }>;
    /**
     * @napcat
     * 获取推荐群聊信息
     */
    ArkShareGroup(params: WSSendParam['ArkShareGroup']): Promise<string>;
    /**
     * @napcat
     * 重启NapCat
     */
    /**
     * @napcat
     * 获取机器人列表
     */
    get_robot_uin_range(): Promise<{
        minUin: string;
        maxUin: string;
    }[]>;
    /**
     * @napcat
     * 设置在线状态
     */
    set_online_status(params: WSSendParam['set_online_status']): Promise<{}>;
    /**
     * @napcat
     * 获取分类后的好友列表
     */
    get_friends_with_category(): Promise<{
        categoryId: number;
        categorySortId: number;
        categoryName: string;
        categoryMbCount: number;
        onlineCount: number;
        buddyList: import("./Interfaces.js").WSSendReturn["get_friend_list"];
    }[]>;
    /**
     * @napcat
     * 设置头像
     */
    set_qq_avatar(params: WSSendParam['set_qq_avatar']): Promise<{}>;
    /**
     * @napcat
     * 获取文件信息
     */
    get_file(params: WSSendParam['get_file']): Promise<{
        file: string;
        url: string;
        file_size: string;
        file_name: string;
        base64: string;
    }>;
    /**
     * @napcat
     * 转发私聊信息
     */
    forward_friend_single_msg(params: WSSendParam['forward_friend_single_msg']): Promise<{}>;
    /**
     * @napcat
     * 转发群聊信息
     */
    forward_group_single_msg(params: WSSendParam['forward_group_single_msg']): Promise<{}>;
    /**
     * @napcat
     * 英翻中
     */
    translate_en2zh(params: WSSendParam['translate_en2zh']): Promise<string[]>;
    /**
     * @napcat
     * 设置表情回复
     */
    set_msg_emoji_like(params: WSSendParam['set_msg_emoji_like']): Promise<{}>;
    /**
     * @napcat
     * 发送合并信息
     */
    send_forward_msg(params: WSSendParam['send_forward_msg']): Promise<{
        message_id: number;
        res_id: string;
    }>;
    /**
     * @napcat
     * 标记私聊消息已读
     */
    mark_private_msg_as_read(params: WSSendParam['mark_private_msg_as_read']): Promise<{}>;
    /**
     * @napcat
     * 标记群聊消息已读
     */
    mark_group_msg_as_read(params: WSSendParam['mark_group_msg_as_read']): Promise<{}>;
    /**
     * @napcat
     * 获取好友信息列表
     */
    get_friend_msg_history(params: WSSendParam['get_friend_msg_history']): Promise<{
        messages: import("./Interfaces.js").WSSendReturn["get_msg"][];
    }>;
    /**
     * @napcat
     * 创建收藏
     */
    create_collection(params: WSSendParam['create_collection']): Promise<{}>;
    /**
     * @napcat
     * 获取收藏列表
     */
    get_collection_list(params: WSSendParam['get_collection_list']): Promise<{}>;
    /**
     * @napcat
     * 设置签名
     */
    set_self_longnick(params: WSSendParam['set_self_longnick']): Promise<{
        result: 0;
        errMsg: "";
    }>;
    /**
     * @napcat
     * 获取最近聊天信息
     */
    get_recent_contact(params?: WSSendParam['get_recent_contact']): Promise<{
        lastestMsg: import("./Interfaces.js").WSSendReturn["get_msg"];
        peerUin: string;
        remark: string;
        msgTime: string;
        chatType: number;
        msgId: string;
        sendNickName: string;
        sendMemberName: string;
        peerName: string;
    }[]>;
    /**
     * @napcat
     * 标记所有消息已读
     */
    _mark_all_as_read(): Promise<{}>;
    /**
     * @napcat
     * 获取资料信息 (?)
     */
    get_profile_like({}: {}): Promise<{
        uid: string;
        src: number;
        latestTime: number;
        count: number;
        giftCount: number;
        customId: number;
        lastCharged: number;
        bAvailableCnt: number;
        bTodayVotedCnt: number;
        nick: string;
        gender: number;
        age: number;
        isFriend: boolean;
        isvip: boolean;
        isSvip: boolean;
        uin: number;
    }[]>;
    /**
     * @napcat
     * 获取自定义表情
     */
    fetch_custom_face(params?: WSSendParam['fetch_custom_face']): Promise<string[]>;
    /**
     * @napcat
     * 获取表情包
     */
    fetch_emoji_like(params: WSSendParam['fetch_emoji_like']): Promise<{
        result: 0;
        errMsg: "";
        emojiLikesList: {
            tinyId: string;
            nickName: string;
            headUrl: string;
        }[];
        cookie: "";
        isLastPage: boolean;
        isFirstPage: boolean;
    }>;
    /**
     * @napcat
     * 设置输入状态
     */
    set_input_status(params: WSSendParam['set_input_status']): Promise<{
        result: 0;
        errMsg: "success";
    }>;
    /**
     * @napcat
     * 获取群聊额外信息
     */
    get_group_info_ex(params: WSSendParam['get_group_info_ex']): Promise<{
        groupCode: string;
        resultCode: 0;
        extInfo: {
            groupInfoExtSeq: number;
            reserve: number;
            luckyWordId: string;
            lightCharNum: number;
            luckyWord: string;
            starId: number;
            essentialMsgSwitch: number;
            todoSeq: number;
            blacklistExpireTime: number;
            isLimitGroupRtc: number;
            companyId: number;
            hasGroupCustomPortrait: number;
            bindGuildId: string;
            groupOwnerId: {
                memberUin: string;
                memberUid: string;
                memberQid: string;
            };
            essentialMsgPrivilege: number;
            msgEventSeq: string;
            inviteRobotSwitch: number;
            gangUpId: string;
            qqMusicMedalSwitch: number;
            showPlayTogetherSwitch: number;
            groupFlagPro1: string;
            groupBindGuildIds: {
                guildIds: string[];
            };
            viewedMsgDisappearTime: string;
            groupExtFlameData: {
                switchState: number;
                state: number;
                dayNums: string[];
                version: number;
                updateTime: string;
                isDisplayDayNum: false;
            };
            groupBindGuildSwitch: number;
            groupAioBindGuildId: string;
            groupExcludeGuildIds: {
                guildIds: string[];
            };
            fullGroupExpansionSwitch: number;
            fullGroupExpansionSeq: string;
            inviteRobotMemberSwitch: number;
            inviteRobotMemberExamine: number;
            groupSquareSwitch: number;
        };
    }>;
    /**
     * @napcat
     * 获取群忽略添加列表
     */
    get_group_ignore_add_request(params: WSSendParam['get_group_ignore_add_request']): Promise<{
        join_requests: {
            request_id: number;
            requester_uin: number;
            requester_nick: string;
            group_id: number;
            group_name: string;
            checked: boolean;
            actor: number;
        }[];
    }>;
    /**
     * @napcat
     * 删除群公告
     */
    _del_group_notice(params: WSSendParam['_del_group_notice']): Promise<{}>;
    /**
     * @napcat
     * 获取用户资料信息 (?)
     */
    fetch_user_profile_like(params: WSSendParam['fetch_user_profile_like']): Promise<string>;
    /**
     * @napcat
     * 好友戳一戳
     */
    friend_poke(params: WSSendParam['friend_poke']): Promise<{}>;
    /**
     * @napcat
     * 群聊戳一戳
     */
    group_poke(params: WSSendParam['group_poke']): Promise<{}>;
    /**
     * @napcat
     * 获取PacketServer状态
     */
    nc_get_packet_status(): Promise<{}>;
    /**
     * @napcat
     * 获取陌生人信息
     */
    nc_get_user_status(params: WSSendParam['nc_get_user_status']): Promise<{
        status: number;
        ext_status: number;
    }>;
    /**
     * @napcat
     * 获取Rkey
     */
    nc_get_rkey(): Promise<{
        rkey: string;
        time: number;
        type: number;
    }[]>;
    /**
     * @napcat
     * 获取群聊禁言列表
     */
    get_group_shut_list(params: WSSendParam['get_group_shut_list']): Promise<{}>;
    /**
     * @napcat
     * 获取忽略的加群通知
     */
    get_group_ignored_notifies(params: WSSendParam['get_group_ignored_notifies']): Promise<{
        join_requests: {
            request_id: number;
            requester_uin: number;
            requester_nick: string;
            group_id: string;
            group_name: string;
            checked: boolean;
            actor: number;
        }[];
    }>;
    /**
     * @napcat
     * 群签到
     */
    set_group_sign(params: WSSendParam['set_group_sign']): Promise<{}>;
    /**
     * @napcat
     * 群签到
     */
    send_group_sign(params: WSSendParam['send_group_sign']): Promise<{}>;
    /**
     * @napcat
     * 签名小程序
     */
    get_mini_app_ark(params: WSSendParam['get_mini_app_ark']): Promise<{
        appName: string;
        appView: string;
        ver: string;
        desc: string;
        prompt: string;
        metaData: {
            detail_1: {
                appid: string;
                appType: number;
                title: string;
                desc: string;
                icon: string;
                preview: string;
                url: string;
                scene: number;
                host: {
                    uin: number;
                    nick: string;
                };
                shareTemplateId: string;
                shareTemplateData: Record<string, unknown>;
                showLittleTail: string;
                gamePoints: string;
                gamePointsUrl: string;
                shareOrigin: number;
            };
        };
        config: {
            type: string;
            width: number;
            height: number;
            forward: number;
            autoSize: number;
            ctime: number;
            token: string;
        };
    } | {
        ver: string;
        prompt: string;
        config: {
            type: string;
            width: number;
            height: number;
            forward: number;
            autoSize: number;
            ctime: number;
            token: string;
        };
        app: string;
        view: string;
        meta: {
            detail_1: {
                appid: string;
                appType: number;
                title: string;
                desc: string;
                icon: string;
                preview: string;
                url: string;
                scene: number;
                host: {
                    uin: number;
                    nick: string;
                };
                shareTemplateId: string;
                shareTemplateData: Record<string, unknown>;
                showLittleTail: string;
                gamePoints: string;
                gamePointsUrl: string;
                shareOrigin: number;
            };
        };
        miniappShareOrigin: number;
        miniappOpenRefer: string;
    }>;
    /**
     * @napcat
     * 获取ai语音
     */
    get_ai_record(params: WSSendParam['get_ai_record']): Promise<string>;
    /**
     * @napcat
     * 获取ai语音h模型列表
     */
    get_ai_characters(params: WSSendParam['get_ai_characters']): Promise<{
        type: string;
        characters: {
            character_id: string;
            character_name: string;
            preview_url: string;
        }[];
    }[]>;
    /**
     * @napcat
     * 发送群聊ai语音
     */
    send_group_ai_record(params: WSSendParam['send_group_ai_record']): Promise<{
        message_id: number;
    }>;
}
